AWSTemplateFormatVersion: 2010-09-09
Description: 'Cloudformation for provisioning services required to setup the CI/CD using GitHub actions and CodeDeploy. **WARNING** This template creates EC2, VPC and related resources. You will be billed for the AWS resources used if you create a stack from this template.'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "VPC Configurations"
        Parameters:
          - VpcCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
      - Label:
          default: "Autoscaling configurations"
        Parameters:
          - ImageId
          - InstanceType
          - AutoScalingGroupMinSize
          - AutoScalingGroupMaxSize
          - AutoScalingGroupDesiredCapacity
      - Label:
          default: "Github configurations"
        Parameters:
          - GithubRepoName
          - ThumbprintList

Parameters:
  VpcCIDR:
    Type: String
    Default: 10.192.0.0/16
    Description: "VPC CIDR"

  PublicSubnet1CIDR:
    Type: String
    Default: 10.192.10.0/24
    Description: "Public Subnet 1 CIDR"

  PublicSubnet2CIDR:
    Type: String
    Default: 10.192.11.0/24
    Description: "Public Subnet 2 CIDR"

  PrivateSubnet1CIDR:
    Type: String
    Default: 10.192.20.0/24
    Description: "Private Subnet 1 CIDR"

  PrivateSubnet2CIDR:
    Type: String
    Default: 10.192.21.0/24
    Description: "Private Subnet 2 CIDR"

  ImageId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    Description: "AMI ID"

  InstanceType:
    Type: String
    Default: t2.medium
    Description: "EC2 instance type"

  AutoScalingGroupMinSize:
    Type: Number
    Default: 2

  AutoScalingGroupMaxSize:
    Type: Number
    Default: 4

  AutoScalingGroupDesiredCapacity:
    Type: Number
    Default: 2

  ThumbprintList:
    Type: String
    Default: 6938fd4d98bab03faadb97b34396831e3780aea1

  GithubRepoName:
    Type: String
    Description: "GitHub repository name"

Resources:

  # VPC and Subnets
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs '']

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs '']

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select [1, !GetAZs '']

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: "Security group for ALB"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  WebappSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: "Security group for Webapp"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref ALBSecurityGroup

  # IAM Roles
  WebappRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource: "*"

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: WebAppALB
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups: 
        - !Ref ALBSecurityGroup

Outputs:
  VPCID:
    Description: "VPC ID"
    Value: !Ref VPC

  PublicSubnet1ID:
    Description: "Public Subnet 1 ID"
    Value: !Ref PublicSubnet1

  PublicSubnet2ID:
    Description: "Public Subnet 2 ID"
    Value: !Ref PublicSubnet2

  PrivateSubnet1ID:
    Description: "Private Subnet 1 ID"
    Value: !Ref PrivateSubnet1

  PrivateSubnet2ID:
    Description: "Private Subnet 2 ID"
    Value: !Ref PrivateSubnet2
